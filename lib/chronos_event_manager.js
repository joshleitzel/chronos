// Generated by CoffeeScript 1.6.2
(function() {
  if (typeof define !== 'function') { var define = require('amdefine')(module); };
  var __slice = [].slice;

  define(['./chronos_error', './interval'], function(ChronosError, Interval) {
    var ChronosEvent, ChronosEventManager;

    ChronosEvent = (function() {
      function ChronosEvent(event, callback) {
        this.event = event;
        this.callback = callback;
      }

      ChronosEvent.prototype.execute = function(params) {
        return this.callback.apply(this, params);
      };

      return ChronosEvent;

    })();
    ChronosEventManager = (function() {
      function ChronosEventManager() {
        this.events = {};
      }

      ChronosEventManager.prototype.on = function(event, callback, options) {
        var alreadyRegistered, delay, oldTZ,
          _this = this;

        alreadyRegistered = this.events[event] != null;
        if (!alreadyRegistered) {
          this.events[event] = [];
        }
        if (event === 'change:timezone' && !alreadyRegistered) {
          oldTZ = process.env.TZ;
          delay = options[0] || '5 minutes';
          (new Interval({
            timeString: delay
          }))["do"](function() {
            if (process.env.TZ !== oldTZ) {
              _this.trigger('change:timezone', oldTZ, process.env.TZ);
            }
            return oldTZ = process.env.TZ;
          });
        }
        return this.events[event].push(new ChronosEvent(event, callback));
      };

      ChronosEventManager.prototype.trigger = function() {
        var callback, event, params, _i, _len, _ref, _results;

        event = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (this.events[event] != null) {
          _ref = this.events[event];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            callback = _ref[_i];
            _results.push(callback.execute(params));
          }
          return _results;
        } else {
          throw new ChronosError("Unknown event `" + event + "' triggered");
        }
      };

      return ChronosEventManager;

    })();
    return new ChronosEventManager;
  });

}).call(this);
